package algorithms;

import main.*;
import operators.*;

import java.util.Stack;

public class DFS_L<T> extends Searcher<T> {
    private Stack<Node<T>> open;
    private int lim;

    public DFS_L(Operators<T>[] operators, int lim) {
        super(operators);
        this.open = new Stack<>();
        this.lim = lim;
    }


    @Override
    public void addSuccessors(Node<T> node) {
    	//loop the operators array in reverse order because this algorithm uses stack
        for (int i = this.operators.length - 1; i >= 0; i--) {
            T curState = node.getState();
            T nextState = this.operators[i].doMove(curState);
            if (nextState != null) {
                Node<T> next = new Node<T>(nextState, this.operators[i].toString(), node, node.getDepth() + 1);
                	this.open.push(next);
            }
        }
    }

    @Override
    public String solve(Node<T> init, Node<T> goal) {
        this.close.clear();
    	this.open.clear();
        this.open.push(init);
        int x = 0;
        while (!this.open.isEmpty()) {
        	System.out.println((x));
        	x++;
            Node<T> v = this.open.pop();
            if (!this.close.contains(v) && !this.open.contains(v)) {
                if (v.equals(goal))
                    return this.path(v);
                this.close.add(v);
                if (v.getDepth() < this.lim)
                    this.addSuccessors(v);
            }
        }
        return "No solution";
    }
}